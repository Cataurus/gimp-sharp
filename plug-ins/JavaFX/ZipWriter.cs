// The JavaFX plug-in
// Copyright (C) 2004-2016 Maurits Rijk
//
// ZipWriter.cs
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

using System;
using System.IO;

using ICSharpCode.SharpZipLib.Zip;

namespace Gimp.JavaFX
{
  class ZipWriter
  {
    readonly Image _image;

    ZipOutputStream _zipStream;
    StreamWriter _streamWriter;

    public int Indent {get; set;}

    public ZipWriter(Image image)
    {
      _image = image;
    }

    public void CreateFxz()
    {
      using (var zipStream = 
	     new ZipOutputStream(File.Create(GetTemporaryDirectory() + 
					     "foo.fxz"))) {
	_zipStream = zipStream;

	zipStream.SetLevel(9);

	string filename = "content.fxd";
	string fullpath = GetFullPath(filename);

	var ms = File.Create(fullpath);
	_streamWriter = new StreamWriter(ms);

	WriteContent();
	ms.Close();
	
	AddFileToZip(fullpath);
	RemoveTemporaryFile(fullpath);
	
	_streamWriter.Flush();

	zipStream.Finish();
	zipStream.Close();
      }
    }

    String GetTemporaryDirectory() => Gimp.Directory + "/tmp/";

    void WriteContent()
    {
      CreateZipEntry("content.fxd");
      
      WriteHeader();
      WriteLayers();
    }

    void CreateZipEntry(string filename)
    {
      var entry = new ZipEntry(filename) {DateTime = DateTime.Now};
      _zipStream.PutNextEntry(entry);
    }

    void WriteHeader()
    {
      Output("/*");
      Output(" * Generated by JavaFX plugin for GIMP.");
      Output(" * Created on Fri Sep 18 14:38:55 2009");
      Output(" */");
      Output("//@version 1.0");
    }

    void WriteLayers()
    {
      Output("Group {{");
      Indent++;
      Output("clip: Rectangle {{ x:0 y:0 width:{0} height:{1} }}",
	     _image.Width, _image.Height);
      Output("content: [");

      _image.Layers.ForEach(layer => WriteLayer(layer));
      Output("]");
      Indent--;
      Output("}}");
    }

    void WriteLayer(Layer layer)
    {
      WritePng(layer);

      Indent++;
      Output("ImageView {{");

      Indent++;
      Output("id: \"{0}\"", layer.Name);
      Output("x: 0");
      Output("y: 0");
      Output("image: Image {{");
      Indent++;
      Output("url: \"{{__DIR__}}{0}\"", GetFilename(layer));
      Indent--;
      Output("}}");
      Indent--;
      Output("}},");
      Indent--;      
    }

    void WritePng(Layer layer)
    {
      String filename = GetFilename(layer);
      String fullpath = GetFullPath(filename);
      layer.Save(fullpath);

      CreateZipEntry(filename);
      AddFileToZip(fullpath);
      RemoveTemporaryFile(fullpath);
    }

    string GetFilename(Layer layer) => layer.Name + ".png";

    string GetFullPath(string filename) => GetTemporaryDirectory() + filename;

    void AddFileToZip(string fullpath)
    {
      Console.WriteLine("Path: " + fullpath);
      using (var fs = File.OpenRead(fullpath)) {
	CopyToZipStream(fs);
	fs.Close();
      }
    }

    void CopyToZipStream(Stream stream)
    {
	var buffer = new byte[4096];
	int sourceBytes;
	do {
	  sourceBytes = stream.Read(buffer, 0, buffer.Length);
	  _zipStream.Write(buffer, 0, sourceBytes);
	} while (sourceBytes > 0);
    }

    void RemoveTemporaryFile(string fullpath)
    {
      File.Delete(fullpath);
    }

    void Output(String format, params object[] args)
    { 
      for (int i = 0; i < Indent; i++)
	_streamWriter.Write("\t");
      _streamWriter.WriteLine(format, args);
    }
  }
}
